# Introducción {#sec-chap-introduction}

```{python}
#| echo: false
import warnings; warnings.filterwarnings('ignore')
```

**Resumen**
Este capítulo explica la manera en la que los métodos tratados 
en el libro se sitúan en el marco metodológico y epistemológico 
de las ciencias sociales. Se explica por qué el uso de Python y 
R es fundamental para el análisis computacional de la comunicación 
y, por último, cómo este libro puede ser utilizado por estudiantes 
y académicos.

**Palabras clave.** ciencias sociales computacionales, Python, R

**Objectivos:**

- Entender el rol del análisis computacional en las ciencias sociales.
 - Entender las diferencias entre Python y R.
 - Saber cómo utilizar este libro.

## El papel del análisis computacional en las ciencias sociales {#sec-ccs}

El uso de ordenadores no es nada nuevo en las ciencias sociales. De 
hecho, podría decirse que algunas de sus disciplinas han sido las primeras
 en adoptar enfoques computacionales. Por ejemplo, la recopilación y 
el análisis de datos de encuestas a gran escala, que se remontan a 1890 
con el uso de la máquina Hollerith en el censo estadounidense. Mucho antes 
de que cada académico tuviera su propio ordenador en la mesa, los científicos 
sociales utilizaban tarjetas perforadas y ordenadores centrales para tratar 
esos datos. Si pensamos en el análisis de la comunicación de forma más 
específica, ya vemos intentos de automatizar el análisis de contenido en 
la década de 1960 [véase, p. ej, @Scharkow2017].

Sin embargo, el panorama ha cambiado profundamente en las últimas décadas. 
La cantidad y el tipo de datos que podemos recopilar, así como la capacidad
 de procesamiento a la que tenemos acceso, han aumentado drásticamente. 
En particular, las huellas digitales que dejamos al comunicarnos online, 
desde datos de acceso hasta los comentarios que publicamos, han requerido 
nuevos enfoques [p. ej., @Trilling2017b]. Al mismo tiempo, la mejora de los 
recursos computacionales nos permite formular preguntas que antes no podíamos 
responder.

@Gonzalez-Bailon2017, por ejemplo, argumentó que el análisis computacional 
de la comunicación nos permite poner a prueba teorías que se formularon hace
 un siglo, como la teoría de la imitación social de Tarde (u otras). 
@Salganik2019 expone una impresionante trayectoria de continuidad metodológica 
al mostrar cómo los nuevos métodos de investigación digital se basan en métodos 
establecidos, como encuestas y experimentos, y se relacionan con ellos, al 
tiempo que ofrecen nuevas posibilidades al observar el comportamiento de 
nuevas maneras.

Un malentendido frecuente sobre los enfoques computacionales es que, de 
alguna manera, son a-teóricos. Probablemente esto se alimente de los tópicos 
surgidos durante el auge del "Big Data" en la década de 2010, como el infame 
dicho de que, en la era del Big Data, la correlación es suficiente [@Mayer2013]. 
Sin embargo, esto no podría ser más incorrecto: como muestra el trabajo de 
Kitchin [@Kitchin2014;@Kitchin2014data], los enfoques computacionales pueden 
estar bien integrados en las epistemologías existentes. Para que el campo avance, 
el trabajo computacional y teórico debe ser simbiótico, con cada uno nutriendo 
al otro y sin que ninguno reclame su superioridad [@margolin19]. Así, la caja de 
herramientas de los científicos computacionales incluye tanto técnicas más basadas 
en datos como más basadas en la teoría; algunas siendo más ascendentes e inductivas, 
otras más descendentes y deductivas. Lo que importa a este respecto, y lo que a 
menudo se pasa por alto, es en qué fase del proceso de investigación se emplean. 
En otras palabras, tanto los enfoques inductivos como los deductivos, tal y como 
se distinguen en los libros de texto de ciencias sociales más tradicionales 
[p. ej., @Bryman2012], tienen su equivalente en las ciencias sociales computacionales.

Por lo tanto, sugerimos que el proceso de recopilación y análisis de datos se 
conciba como un proceso en cadena. Para probar, por ejemplo, una hipótesis 
teórica sobre la personalización en las noticias, podríamos imaginar un proceso 
que empezara con el scraping de noticias en línea; siguiera con algunas técnicas 
de procesamiento del lenguaje natural, como el Reconocimiento de Entidades Nombradas 
(NER, por sus siglas en inglés); y, finalmente, comprobara si la mención de 
personas influye en la ubicación de las noticias. Aquí podemos distinguir entre 
las partes del proceso que son necesarias, pero no nos interesan intrínsecamente, 
y las partes del proceso que sí responden a una pregunta realmente interesante. 
En este ejemplo, el funcionamiento interno del NER no nos resulta interesante: 
solo necesitamos hacerlo para responder a nuestra pregunta. Nos interesa saber si 
funciona bien y, sobre todo, qué sesgos puede tener que afecten a nuestros resultados 
sustantivos, pero en realidad no estamos evaluando ninguna teoría sobre el 
Reconocimiento de Entidades Nombradas. Sin embargo, estamos respondiendo a una 
pregunta interesante teóricamente cuando analizamos el proceso en su conjunto, 
es decir, cuando aplicamos las herramientas para abordar un problema científico 
social. Por supuesto, lo que es realmente interesante depende de la disciplina de 
cada uno: para un lingüista computacional, el funcionamiento interno del Reconocimiento 
de Entidades Nombradas puede ser en realidad la parte interesante, y nuestra 
pregunta de investigación solo una "tarea complementaria".

Esta distinción también se denomina a veces "construir una ratonera mejor" en vez 
de "comprensión". Por ejemplo, @Breiman2001 señaló: “Mi actitud hacia los métodos 
nuevos y/o complicados es pragmática. Demuestra que tienes una ratonera mejor y 
te creeré. Pero más vale que las pruebas sean concretas y convincentes” (p. 230). 
En cambio, muchos científicos sociales utilizan modelos estadísticos para probar 
teorías y comprender procesos sociales: quieren entender específicamente cómo 
$x$ se relaciona con $y$ aunque $y$ pueda predecirse mejor mediante otra variable 
(que teóricamente resulta poco interesante).

Este libro trata en cierta medida tanto de la construcción de ratoneras como de 
la comprensión. Cuando se construye un clasificador de aprendizaje automático 
supervisado para determinar el tema de cada texto en una gran colección de artículos 
de noticias o discursos parlamentarios, se está construyendo una (mejor) ratonera. 
Pero como científico social, el trabajo no acaba ahí. Hace falta utilizar 
la ratonera para responder a las preguntas teóricamente interesantes.

Esperamos es que los contenidos de este libro proporcionen 
un marco de referencia que ayude a enfrentar los retos actuales de la investigación 
tanto en el mundo académico como en la industria. Por un lado, el campo emergente 
de las Ciencias Sociales Computacionales se ha convertido en una de las áreas de 
conocimiento más prometedoras y muchas universidades e institutos de investigación 
buscan investigadores con este perfil. Por otro lado, es ampliamente conocido 
que hoy en día las habilidades computacionales aumentan las oportunidades 
laborales en empresas privadas, organismos públicos u ONGs, dado el creciente 
interés por las soluciones basadas en datos.

Mientras planificábamos este libro, tuvimos que tomar algunas decisiones difíciles. 
Nuestro objetivo era ofrecer, al menos, una introducción a todas las técnicas 
a las que probablemente se enfrentarán los estudiantes y académicos que deseen 
analizar computacionalmente la comunicación. Por supuesto, la literatura específica 
(técnica) sobre técnicas como, por ejemplo, el aprendizaje automático, puede 
tratar el tema más extensamente, y el estudiante interesado puede querer sumergirse 
en una o varias de las técnicas que cubrimos con mayor profundidad. Nuestro objetivo 
es el ofrecer conocimientos prácticos suficientes para aplicar estas técnicas y 
saber qué buscar. Aunque intentamos abarcar todo el campo sin sacrificar demasiada 
profundidad al tratar cada técnica, nos hemos visto obligados a trazar algunos límites. 
Por ejemplo, una técnica que algunos lectores pueden echar en falta es el modelado basado 
en agentes (ABM, por sus siglas en inglés). Es cierto que estas 
técnicas de simulación son importantes en las ciencias sociales computacionales en 
general [@cioffi-revilla2014], y recientemente se han aplicado también al análisis de 
la comunicación [@Waldherr2014;@Wettstein2020]. Sin embargo, al revisar los planes de 
estudio de los cursos actuales que enseñan el análisis computacional de la comunicación, 
encontramos que el uso de simulaciones no parece estar en el centro de tales análisis 
(todavía). En cambio, al observar el uso de técnicas computacionales en campos como los 
estudios de periodismo [p. ej., @Boumans2016], los estudios de medios de comunicación 
[p. ej., @Rieder2017], o el movimiento del texto como dato [@Grimmer2013], 
vemos un conjunto de técnicas que se utilizan una y otra vez, y que, por lo tanto, 
hemos incluido en nuestro libro. En concreto, además de las técnicas generales de análisis 
y visualización de datos, presentamos técnicas de recopilación de datos como el *web 
scraping* o el uso de API's; técnicas de tratamiento de texto como el procesamiento 
del lenguaje natural y diferentes formas de convertir texto en números; técnicas 
de aprendizaje automático supervisado y no supervisado, y análisis de redes.

## ¿Por qué utilizar Python y/o R? {#sec-whypythonr}

La mayor parte del trabajo en las ciencias sociales computacionales se realiza 
utilizando Python y/o R. Por supuesto, para algunas tareas específicas hay 
programas independientes que se utilizan ocasionalmente; y hay algunas aplicaciones 
útiles escritas en otros lenguajes como C o Java. Pero creemos que es razonable 
decir que es muy difícil adentrarse en el análisis computacional de la comunicación 
sin aprender al menos Python o R, y preferiblemente ambos. Hay muy pocas tareas 
que no se puedan realizar con al menos uno de ellos.

Algunas personas tienen fuertes opiniones sobre qué lenguaje es "mejor", pero 
nosotros discrepamos. La mayoría de las técnicas que nos interesan pueden realizarse 
en cualquiera de los dos lenguajes, por lo que la preferencia personal puede 
ser un factor importante. R comenzó como un entorno de programación estadística, 
y esa herencia sigue siendo visible, por ejemplo, en el fuerte énfasis en vectores 
y factores o en la posibilidad de estimar modelos estadísticos complejos en una 
sola línea de código. Python comenzó como un lenguaje de programación de propósito 
general, lo que significa que algunas de las cosas que hacemos parecen un poco 
más "de bajo nivel": Python abstrae menos los conceptos de programación subyacentes 
que R. Esto a veces nos da más flexibilidad, a costa de ser más prolijos. En los 
últimos años, sin embargo, Python y R se han ido acercando: con módulos como `pandas` 
y `statsmodels`, Python dispone ahora de funcionalidades similares a las de R para 
manejar marcos de datos y estimar modelos estadísticos comunes sobre ellos; y con 
paquetes como `quanteda`, el manejo de texto, tradicionalmente un área fuerte de 
Python, es ahora más accesible en R.

Ésta es la razón principal por la que decidimos escribir este libro "bilingüe". 
Queríamos enseñar técnicas para el análisis computacional de la comunicación, 
sin imponer una implementación específica. Esperamos que el lector aprenda de 
nuestro libro, por ejemplo, cómo transformar un texto en atributos numéricos y 
cómo elegir un modelo de aprendizaje automático adecuado, pareciéndole menos 
importante en qué lenguaje se hace.

Sin embargo, a veces hay razones de peso para elegir un lenguaje por encima 
del otro. Por ejemplo, muchos modelos de aprendizaje automático del popular 
paquete `caret` en R crean una matriz densa, lo que limita mucho el número de 
documentos y características que se pueden utilizar. De la misma manera, 
algunas tareas complejas de *web scraping* pueden ser más sencillas de realizar 
en Python. Por otra parte, las técnicas de manipulación y visualización de 
datos de R en el entorno `tidyverse` son conocidas por su facilidad de uso y 
su calidad. En los escasos casos en los que creemos que R o Python son 
claramente preferibles para realizar una tarea determinada, lo indicaremos; 
para los demás, creemos que es el lector el que debe elegir.

## Cómo utilizar este libro {#sec-howtouse}

Este libro se diferencia, por una parte, de aquellos más orientados a 
la técnica y, por otra, de los más conceptuales. Cubrimos el trasfondo 
técnico necesario para entender lo que está ocurriendo, pero mantenemos 
al mínimo tanto los conceptos informáticos como los matemáticos. 
Por ejemplo, si hubiéramos escrito un libro más técnico sobre programación 
en Python, habríamos introducido cuanto antes y en detalle conceptos 
como clases, herencia e instancias de clases. En lugar de ello, decidimos 
proporcionar dicha información solo como contexto adicional cuando 
fuera necesario, y centrarnos, de forma más bien pragmática, en la 
aplicación de técnicas para el análisis computacional de la comunicación. 
De la misma manera, si hubiéramos escrito un libro más conceptual sobre 
nuevos métodos en nuestro campo, habríamos hecho más hincapié en los 
aspectos epistemológicos y habríamos pasado por alto los ejemplos de 
programación que constituyen el núcleo de este libro.

Tampoco esperamos que los lectores de este libro posean muchos conocimientos 
previos. Por supuesto, algo de familiaridad con la informática 
ayuda, pero no hay ningún requisito estricto sobre qué es necesario 
saber. Igualmente, en términos de estadística, es útil haber oído 
hablar de conceptos como la correlación o el análisis de regresión, 
pero incluso si los conocimientos son bastante limitados, debería 
ser fácil no perderse leyendo el libro.

Esto también significa que es posible saltarse capítulos. Por ejemplo, 
si ya trabajas con R y/o Python, es posible que no necesites las 
instrucciones detalladas del principio. Aun así, el libro sigue un orden 
lógico en el que cada capítulo se basa en los anteriores. Por ejemplo, 
al explicar el aprendizaje automático supervisado sobre datos textuales, 
esperamos que el lector esté familiarizado con los capítulos anteriores que 
tratan del aprendizaje automático en general, o con el manejo de datos textuales.

Este libro está diseñado de tal manera que pueda utilizarse como libro de 
texto para cursos introductorios sobre el análisis computacional de las 
comunicaciones. Por lo general, estos cursos se imparten a nivel de postgrado, 
pero es perfectamente posible utilizar este libro en un programa universitario, 
omitiendo las partes que puedan resultar demasiado complejas. Todos los 
ejemplos de código en este libro no solo están impresos, sino que también 
están disponibles en línea. Por lo tanto, tanto los estudiantes como los 
científicos sociales que deseen aumentar sus conocimientos deberían poder 
utilizar este libro de forma autodidacta, sin necesidad de un curso formal. 
Por último, este libro también puede servir de referencia a los lectores que 
se pregunten: "¿Cómo se hacía esto?". Especialmente, si el lenguaje en el que 
trabajas principalmente es R, puedes buscar cómo hacer cosas similares 
en Python y viceversa.


::: {.callout-note icon=false collapse=true}
## Ejemplos de código

Independientemente del contexto en el que utilice este libro, algo es seguro: 
la única forma de aprender métodos de análisis computacional es practicando 
y jugando con el código. Por este motivo, los ejemplos de código son, probablemente, 
la parte más importante del libro. En la medida de lo posible, los ejemplos 
utilizan datos reales disponibles gratuitamente en Internet. Para asegurarnos 
de que los ejemplos sigan funcionando dentro de cinco años, intentamos 
proporcionar una copia de estos datos en el sitio web del libro, además de un 
enlace a la fuente original.

Algo a tener en cuenta es que, para evitar repeticiones innecesarias, los 
ejemplos a veces están diseñados para continuar con fragmentos anteriores 
del mismo capítulo. Por lo tanto, si parece que falta un conjunto de datos, 
o si algún paquete aún no se ha importado, asegúrate de ejecutar todos 
los ejemplos de código del capítulo en cuestión.

Además, recuerda que, aunque es posible copiar y pegar el código de la 
página web que acompaña a este libro[^1], te recomendamos que escribas los 
ejemplos tú mismo. De este modo, serás más consciente de los comandos que 
utilizas y los incorporarás a tu "memoria muscular".

Por último, ten en cuenta que los ejemplos de código de este libro son 
solo ejemplos. Suele haber más formas de hacer las cosas, y la nuestra no 
es necesariamente la única buena (ni mucho menos la mejor). Así que, después 
de conseguir que un ejemplo funcione, te recomendamos dedicar algo de tiempo 
a jugar con él: prueba diferentes opciones, introduce tus propios datos, o 
intenta conseguir el mismo resultado de una manera diferente. Lo más importante 
que debes recordar es que ¡no puedes romper nada! Así que prueba, diviértete, 
y si nada funciona, siempre puedes volver a empezar desde el ejemplo de código 
del libro.

:::

## Instalación de R y Python {#sec-installing}

R y Python son los lenguajes de programación más populares que los científicos 
de datos y los académicos computacionales han adoptado para llevar a cabo su trabajo. 
Aunque muchos desarrollan una preferencia por uno u otro lenguaje, lo más 
probable es que al final alternes entre uno y otro, en función de la tarea 
específica que tengas entre manos y del proyecto en el que participes.

Antes de empezar con el análisis de datos y la comunicación en Python o R, es 
necesario instalar en el ordenador intérpretes para estos lenguajes (es decir, 
programas que puedan leer código en estos lenguajes y ejecutarlo). Los intérpretes 
de Python y R son de código abierto y su descarga y uso son totalmente gratuitos. 
Aunque existen varios servicios en línea en los que se puede ejecutar código para 
ambos lenguajes (como Google Colab o RStudio Cloud), en general es mejor instalar 
un intérprete en el ordenador.

Después de instalar Python o R, ya puedes ejecutar código en estos lenguajes, pero 
también te vendrá bien tener un buen `Entorno de Desarrollo Integrado (IDE, por sus 
siglas en inglés)` para desarrollar tus scripts (secuencias de comandos) de análisis 
de datos. Para R, recomendamos RStudio, cuya instalación es gratuita y que actualmente 
es el entorno más popular para trabajar con R. Para Python, recomendamos empezar con 
JupyterLab o JupyterNotebook, que es un entorno de navegador para escribir y ejecutar 
código Python. Todas estas herramientas están disponibles y bien documentadas para Windows, 
MacOS y Linux. Una vez explicado cómo instalar R y Python, hay una sección muy importante 
sobre la instalación de paquetes. Si planeas usar solo R o Python (por ahora), siéntete 
libre de saltarte la parte sobre el otro lenguaje.

Si quieres escribir programas en Python más largos (a diferencia de, por ejemplo, 
scripts cortos de análisis de datos) probablemente quieras instalar también un IDE 
completo. Para ello recomendamos PyCharm2[^2], que tiene una versión gratuita con todo lo 
que necesitas, y la versión premium también es gratuita para estudiantes, académicos y 
desarrolladores de código abierto. En su sitio web se encuentran las instrucciones 
de descarga e instalación.

::: {.callout-note icon=false collapse=true}
## Anaconda
. Una alternativa a instalar R, Python y las bibliotecas opcionales por separado y a 
medida que las necesites (que explicaremos más adelante en este capítulo) es instalar 
la llamada `Anaconda Distribution`, una de las plataformas más utilizadas y extensas 
para realizar ciencia de datos. Anaconda es gratuita, de código abierto y está concebida 
para ejecutar código Python y R para el análisis de datos y el aprendizaje automático. 
La instalación completa de Anaconda Distribution en el ordenador[^3] proporciona todo lo 
necesario para seguir los ejemplos de este libro e incluye entornos de desarrollo 
como Spyder, Jupyter y RStudio. También incluye un gran conjunto de paquetes preinstalados 
de uso frecuente en la ciencia de datos y su propio gestor de paquetes, `conda`, que 
te ayudará a instalar y actualizar otras bibliotecas o dependencias. En resumen, 
Anaconda agrupa casi todo el software necesario para realizar análisis computacionales 
de comunicación.

Entonces, ¿es mejor instalar Anaconda o instalar todo el software por separado como 
se indica en este capítulo? Depende. Entre sus ventajas, al descargar Anaconda se tiene todo 
instalado a la vez y no tienes que preocuparte por las dependencias (por ejemplo, los 
usuarios de Windows normalmente no tienen instalado un compilador de C, pero algunos 
paquetes pueden necesitarlo). Pero como desventaja, es enorme y también instala muchas cosas 
que no necesitas, por lo que, en esencia, obtienes una instalación no estándar, en la 
que los programas y paquetes se almacenan en ubicaciones diferentes a las que tú (o tu 
ordenador) podéis esperar. Además, como casi todos los ordenadores ya tienen instalada 
alguna versión de Python (aunque no lo sepas), también puedes encontrarte en una situación 
confusa en la que no quede claro qué versión estás ejecutando, o para qué versión has 
instalado un paquete. Por estas razones, nuestra recomendación es no utilizar Anaconda 
a menos que ya esté instalado o exista una razón específica para hacerlo (por ejemplo, 
si un profesor exige que se utilice).

:::

### Instalación de R y RStudio

En primer lugar, instalaremos R y su IDE más popular, RStudio, y aprenderemos a instalar 
paquetes adicionales y a ejecutar un script. R es un lenguaje de programación basado en 
objetos orientado a la computación estadística que puede utilizarse para la mayoría de las 
etapas del análisis computacional de la comunicación. Si se es completamente nuevo en R, 
pero se está familiarizado con otros paquetes estadísticos populares en ciencias sociales 
(como SPSS o STATA), descubrirás que puedes realizar en R muchas operaciones estadísticas 
ya conocidas. Si no estás familiarizado con otros paquetes estadísticos, no te asustes, te 
guiaremos desde el principio. A diferencia de gran parte del software tradicional que solo 
requiere una instalación completa e inicial, al trabajar con R, instalaremos primero el lenguaje 
de programación base y luego seguiremos instalando componentes adicionales durante nuestro viaje. 
Puede sonar engorroso, pero en realidad consigue que el trabajo sea más potente y flexible, ya 
que se puede elegir la mejor forma de interactuar con R y, sobre todo, seleccionar los paquetes 
adecuados para el proyecto.

Dicho esto, vamos a instalar R. La forma más fácil es ir a la página de RStudio CRAN en [cran.rstudio.com/](https://cran.rstudio.com/). [^4] 
Haz clic en el enlace para instalar R en tu sistema operativo, e instala la última versión. 
Si utilizas Linux, puedes instalar R a través del gestor de paquetes. Para Ubuntu linux, 
lo mejor es seguir las instrucciones en [cran.r-project.org/bin/linux/ubuntu/](https://cran.r-project.org/bin/linux/ubuntu/).

Una vez instalado R, pasaremos a instalar RStudio Desktop (la versión gratuita). Ve a 
[rstudio.com/products/rstudio/download/#download](https://rstudio.com/products/rstudio/download/#download) 
para descargar y ejecutar el instalador en el ordenador. Al abrir RStudio, debería aparecer una 
pantalla similar a la de la @fig-rstudio. Si es la primera vez que abres RStudio, probablemente 
no veas el panel superior izquierdo (los scripts): puedes crear ese panel creando un nuevo 
`R Script` a través del menú `file` (archivo) o con el icono verde de suma en la esquina 
superior izquierda.

![RStudio Desktop.](img/ch3_r_studio.png){#fig-rstudio}

De los cuatro paneles de RStudio, probablemente dedicarás más tiempo al panel superior 
izquierdo, donde se pueden ver y editar los `scripts` de análisis. Un *script* es simplemente 
una lista de comandos que el ordenador debe ejecutar uno tras otro, por ejemplo: abrir 
los datos, realizar algunos cálculos y hacer un gráfico bonito.

Para ejecutar una línea de código, puedes colocar el cursor en cualquier lugar de esa línea 
y hacer clic en el icono `Run` (Ejecutar) o pulsar `control+Enter`. Para intentarlo, escribe 
lo siguiente en tu nuevo script:

`print("Hello world")`

Ahora, coloca el cursor en esa línea y pulsa `Run` (o control+Enter). Lo que ocurre es que 
la línea se copia a la consola en la esquina inferior izquierda y se ejecuta. Así, los resultados 
de tus comandos (y cualquier mensaje de error) se mostrarán en esta vista de consola.

A diferencia de la mayoría de los lenguajes de programación tradicionales, la forma más 
sencilla de ejecutar código R es línea a línea. Basta con colocar el cursor en la primera línea 
y pulsar repetidamente control+Intro, lo que ejecuta una línea y luego coloca el cursor en la 
siguiente. También puedes seleccionar varias líneas (o parte de una línea) para ejecutar esos 
comandos juntos, pero en general es más fácil comprobar que todo va según lo previsto si se 
ejecuta el código línea por línea.

Otra opción es escribir comandos directamente en la consola y ejecutarlos (pulsando Enter). 
Esto puede resultar interesante para probar cosas o ejecutar partes que solo necesitan 
utilizarse una vez, pero por norma general, insistimos en escribir todos los comandos en un 
*script* y después ejecutarlos. De esta manera, el *script* sirve como un registro de los comandos 
usados para analizar los datos, de forma que tú (o un compañero) podáis leer y entender cómo 
se hizo el análisis.

::: {.callout-note icon=false collapse=true}
## RStudio Projects

Una buena manera de organizar tus datos y tu código es trabajando con Rstudio Projects. De hecho, 
te recomendamos que crees un nuevo proyecto vacío para los ejemplos del libro. Para ello, 
haz clic en el botón *project* (proyecto) de la parte superior derecha y selecciona 
*new project* (nuevo proyecto). A continuación, selecciona *new directory* (nuevo directorio) 
y *new project* e introduce un nombre para este proyecto. Si no quieres que aparezca en 
Documentos, crea además una carpeta padre. Utilizar un proyecto significa que los *scripts* y 
los archivos de datos utilizados están todos en la misma ubicación y no necesitas complicarte 
especificando las ubicaciones de los archivos (que probablemente serán diferentes para otra 
persona o en un ordenador diferente). Además, RStudio recuerda qué archivos estabas editando 
para cada proyecto, por lo que, si estás trabajando en varios proyectos, es muy fácil cambiar 
entre ellos. Recomendamos crear un proyecto ahora para el libro (y/o para cualquier proyecto 
en el que estés trabajando), y siempre cambiar a un proyecto cuando abras RStudio.


:::

En la parte derecha del espacio de trabajo de RStudio, encontrarás dos ventanas adicionales. 
En el panel superior derecho, hay dos o más pestañas: *environment* (entorno) e *history* 
(historial), y, dependiendo de los paquetes adicionales que hayas instalado, puede haber 
alguna más. En *enviroment* puedes gestionar tu espacio de trabajo (el conjunto de elementos 
que necesitas desplegar para realizar el análisis de datos) y tener una lista de los 
objetos que le has añadido. También puedes importar conjuntos de datos con esta herramienta. 
En la pestaña *history* tienes un inventario de las ejecuciones de código, que puedes 
guardar en un fichero, pasar directamente a la consola o a un documento R.

Ten en cuenta que en el entorno puedes guardar y cargar tu "espacio de trabajo" (todos 
los datos que hay en la memoria del ordenador). Sin embargo, confiar en esta funcionalidad 
no suele ser una buena idea: solo guardará el estado de la sesión actual, mientras que 
lo más probable es que desees guardar el archivo de sintaxis de R y/o los datos. Si 
tienes los datos de entrada sin procesar (por ejemplo, como un archivo csv, véase el 
@sec-chap-filetodata) y el *script* de análisis, siempre puedes reproducir lo que has 
estado haciendo. Pero si solo tienes una instantánea del espacio de trabajo, 
conoces el estado hasta el que has llegado, pero es posible que no puedas reproducir 
(o cambiar) cómo has llegado hasta ahí.

En el panel inferior derecho hay otras cinco pestañas útiles. Con *files* (archivos) 
puedes explorar tu ordenador y gestionar todos los archivos que puedas utilizar para 
el proyecto, incluida la importación de conjuntos de datos. En *plots* (gráficos), 
*help* (ayuda) y *viewer* (visor) podrás visualizar los gráficos, documentación y 
resultados generales, respectivamente, que hayas ejecutado en tu *script*. Por último, 
la pestaña *packages* (paquetes) te será de gran utilidad, ya que te permitirá instalar 
o actualizar paquetes desde CRAN o incluso desde un archivo guardado en tu ordenador 
con una interfaz sencilla.


### Instalar Python y Jupyter Notebook

Python es un lenguaje de programación orientado a objetos y es, probablemente, el 
lenguaje favorito de los científicos computacionales y de datos de todas las disciplinas 
del mundo. Existen varias versiones de Python, pero las mayores diferencias suelen 
darse entre Python 2 y Python 3. Afortunadamente, es probable que nunca necesites instalar 
o utilizar Python 2 y, de hecho, desde enero de 2020, ya no recibe soporte. Por lo 
tanto, puedes utilizar cualquier versión reciente de Python 3 para los ejemplos de 
este libro. Al ojear preguntas en foros en línea como Stackoverflow o leer el código 
de otras personas en Github (hablaremos de ello en el @sec-chap-worldcode), es posible que aún 
te encuentres con código heredado en Python 2. Ese código no suele ejecutarse directamente 
en un intérprete de Python 3, pero en la mayoría de los casos solo son necesarias 
pequeñas modificaciones para hacerlo funcionar.

Instalaremos y ejecutaremos Python y Jupyter Notebook utilizando un `terminal` o interfaz 
de línea de comandos. Consiste en una herramienta que se instala en todos los ordenadores 
y que permite introducir comandos al ordenador directamente. En primer lugar, debes crear 
una carpeta de proyecto para este libro utilizando el Explorador de archivos (Windows) o 
Finder (MacOS). A continuación, si utilizas Windows, pulsa Mayús + botón derecho del ratón 
en esa carpeta y selecciona "Abrir ventana de comandos aquí". En MacOS, después de navegar 
a la carpeta que acabas de crear, haz clic en *"Finder"* en el menú en la parte superior 
de la pantalla, luego en "Servicios" y luego en "Nueva terminal en la carpeta". En ambos 
casos, esto debería abrir una nueva ventana (normalmente negra o gris) que te permitirá 
escribir comandos. 

Ten en cuenta que, en la mayoría de ordenadores, Python viene instalado por defecto. 
Puedes comprobarlo escribiendo este comando en la terminal:

```
python3 --version
```
En algunas versiones de Windows, puede que necesites escribir `py` en lugar de `python3`:
```
py --version
```

En cualquier caso, el resultado de este comando debería ser similar a `Python 3.8.5`. 
Ten cuidado, porque en sistemas antiguos `python` todavía puede referirse a Python 2, 
así que asegúrate de que estás usando Python 3.

Si Python no está instalado en el sistema, ve a [www.python.org/downloads/windows/](https://www.python.org/downloads/windows/) o 
[www.python.org/downloads/mac-osx/](https://www.python.org/downloads/mac-osx/) para 
descargar e instalar la última versión estable (que en el momento de escribir estas líneas es la 3.11.5). [^5] 
Una vez instalado, abre de nuevo un terminal y ejecuta el comando anterior para verificar que se ha instalado correctamente.

En cualquier instalación reciente de Python se incluye `pip`, el programa que utilizarás 
para instalar paquetes de Python. Puedes comprobar que pip está instalado correctamente 
escribiendo el siguiente comando en el terminal:


```
pip3 --version
```
Este comando debería devolver algo como `pip 20.0.2 from ... (python 3.8)`. 
Una vez más, es posible que en algunos sistemas `pip3` no funcione: en esos 
casos utiliza `pip` (asegurándote de comprobar que es compatible con Python 3).



**Instalar Jupyter Notebook.**
A continuación, vamos a instalar Jupyter Notebook, un entorno excelente que puede 
utilizarse para ejecutar todos los ejemplos de este libro y para desarrollar *scripts* 
de análisis de datos en Python. Jupyter Notebooks (incluido en IDE JupyterLab si 
lo has instalado), se ejecuta como una aplicación web que permite crear documentos 
que contienen código y fragmentos de texto en línea. Una de las mejores características 
de Jupyter Notebook es que el código se inserta en *fields* (campos) (las llamadas 
*"cells”* (celdas)) que se pueden ejecutar uno a uno, obteniendo su respectiva salida, 
que, al añadirse al texto narrativo (las celdas que no contienen código, sino 
instrucciones o comentarios), hace que el *script* sea más limpio y reproducible. 
También se pueden añadir bloques de texto con formato (utilizando un sencillo lenguaje 
de formato llamado `Markdown`) para explicar a un futuro lector lo que estás haciendo. En 
la @sec-practices, volveremos a hablar de los notebooks (cuadernos) como una buena 
herramienta para un científico computacional.


Puedes instalar Jupyter Notebook directamente usando pip con el siguiente 
comando (ejecutado en un terminal):

```
pip3 install jupyter-notebook
```

Una vez hecho esto, puedes ejecutar Jupyter con el siguiente comando 
en el mismo terminal:

```
jupyter notebook
```
Esto hará que se muestre alguna información útil, incluyendo la URL en la que puedes acceder 
al cuaderno. También lo abrirá en un navegador (por ejemplo, Chrome) para que puedas empezar 
a trabajar directamente. En el navegador verás la pantalla principal de Jupyter (similar a la 
ventana central de la @fig-jupyter). Crea un nuevo cuaderno haciendo clic en el botón *new* 
(nuevo) en la parte superior derecha y seleccionando Python 3. Esto abrirá una ventana similar 
a la imagen inferior de la @fig-jupyter.

![Jupyter Notebook.](img/jupyter.png){#fig-jupyter}

En Jupyter, el código se introduce en celdas. Para empezar, escribe `print("Hello World")` en 
la celda vacía situada junto a `In [ ]:`. A continuación, haz clic en el botón *run* (ejecutar) 
o pulsa control+Intro. Esto ejecutará el comando y mostrará el texto `"Hello world"` en el área 
de salida justo debajo de la celda de entrada. Ten en cuenta que puedes crear más celdas 
utilizando el icono "más" o con el menú *insert* (insertar). También puedes establecer el tipo de 
celda a través del menú *cell*: selecciona código para *scripts* de análisis (que es el valor 
predeterminado), o Markdown para fragmentos de texto, que pueden utilizarse para explicar el 
código y/o interpretar los resultados.

## Instalar paquetes de terceros {#sec-installingpackages}

La función `print` utilizada anteriormente existe automáticamente al iniciar R o Python. Muchas 
funciones, sin embargo, se encuentran en `packages` (paquetes) separados (también conocidos como 
`“libraries”`, (bibliotecas) o `modules` (módulos)), que son generalmente colecciones de comandos 
para una determinada tarea o actividad.

Aunque tanto R como Python están preinstalados con muchos packages útiles, una de las grandes 
ventajas de ambos lenguajes es que cuentan con una comunidad muy activa que continuamente desarrolla, 
mejora y publica nuevos paquetes. A lo largo de este libro, utilizaremos paquetes de terceros para 
diversas tareas, desde la manipulación y visualización de datos hasta el análisis de texto. Por ejemplo, 
utilizaremos el paquete `tidyverse` de R y los paquetes `pandas` de Python para la manipulación de datos.

Para instalar estos paquetes en el ordenador, ejecuta los siguientes comandos: (Nota: si utilizas Anaconda, 
sustituye  `pip3 install` por `conda install`)

::: {.panel-tabset}
## Instalar un paquete de Jupyter
```{python None-None}
#| eval: false
!pip3 install pandas
# (En algunos sistemas será !pip install pandas)
```
## Instalar un paquete en R
```{r None-None1}
#| eval: false
install.packages("tidyverse")
```
:::

Estos comandos obtendrán automáticamente el paquete del repositorio adecuado[^6] y lo instalarán en el 
ordenador. Esto puede llevar un tiempo, especialmente para paquetes grandes como `tidyverse`. Afortunadamente, 
solo es necesario hacerlo una vez. Cada vez que utilices un paquete, tendrás que activarlo mediante 
el comando `import` (Python) o `library` (R).

En general, siempre que te encuentres con un error `No module named 'pandas'` (Python) o `there is no package 
called ‘tidyverse’`, puedes simplemente reinstalar el paquete utilizando el código indicado anteriormente. 
Si obtienes un error como `name 'pandas' is not defined` (Python) o `object 'ggplot' not found` (R), es 
probable que hayas olvidado activar el paquete que incluye esa función.

::: {.callout-note icon=false collapse=true}
## Paquetes utilizados en cada capítulo

Algunos paquetes, como `tidyverse` (R) y `pandas` (Python), dedicados al tratamiento de datos, se utilizan en 
casi todos los capítulos. Muchos capítulos también introducen paquetes específicos, como `igraph`/`networkx` 
para el análisis de redes en el @sec-chap-network. Para no olvidar ninguno de los paquetes necesarios 
en cada parte, cada capítulo (que incluye código) comienza con una nota similar a esta, en la que se indican 
los principales paquetes introducidos en el mismo. También incluye el código necesario para instalar estos 
paquetes, que por supuesto solo es necesario si no los has instalado antes. Recuerda que si estás usando 
Anaconda para Python, debes reemplazar `!pip3 install` por `!conda install` en dicho código. En algunos 
sistemas, puede que necesites usar `!pip install` en lugar de `!pip3 install`.

Estas notas también incluyen un bloque de código para importar todos los paquetes usados en el capítulo, 
que necesitas ejecutar cada vez que uses los ejemplos correspondientes.

:::

[^1]: https://cssbook.net

[^2]: [www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/)

[^3]: [www.anaconda.com/distribution/\#download-section](https://www.anaconda.com/distribution/\#download-section)

[^4]: CRAN, abreviatura de Comprehensive R Archive Network, es una red de sitios web en la que se alojan el propio R y varios paquetes de R.︎

[^5]: Para linux, instala python3 y pip usando el gestor de paquetes. Por ejemplo, en ubuntu se puede ejecutar `sudo apt install python3-pip︎`.

[^6]: De forma similar a la App Store o Play Store, tanto R como Python tienen un repositorio centralizado para paquetes de terceros. Para R, 
este es el Comprehensive R Archive Network (CRAN) mencionado anteriormente, mientras que para Python es el Python Package Index (PyPI) al 
que se accede a través de pip. Normalmente, todos los paquetes en estos repositorios son de código abierto y seguros de instalar.︎

